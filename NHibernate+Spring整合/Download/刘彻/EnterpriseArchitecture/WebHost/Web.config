<?xml version="1.0"?>
<!--
    注意: 除了手动编辑此文件以外， 
    还可以使用 Web 管理工具来配置应用程序的设置。
    可以使用 Visual Studio 中的“网站”->“Asp.Net 配置”选项。
    设置和注释的完整列表在 
    machine.config.comments 中，该文件通常位于 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
  <configSections>
    <sectionGroup name="spring">
      <!---此三项必须配置-->
      <section name="context" type="Spring.Context.Support.WebContextHandler, Spring.Web"/>
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
      <section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/>
      <!---->
    </sectionGroup>
    <section name="databaseSettings" type="System.Configuration.NameValueSectionHandler" />
  </configSections>
  <connectionStrings/>
  <!--spring配置-->
  <spring xmlns="http://www.springframework.net">
    <parsers>
      <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data"/>
      <parser type="Spring.Transaction.Config.TxNamespaceParser, Spring.Data"/>
    </parsers>
    <context>
      <resource uri="config://spring/objects" />
      <resource uri="assembly://WebHost/WebHost.Configs.Base/Base.xml" />
      <!--Dao-->
      <resource uri="assembly://WebHost/WebHost.Configs.Dao/DaoHelp.xml" />
      <resource uri="assembly://WebHost/WebHost.Configs.Dao/DBDao.xml" />
      <resource uri="assembly://WebHost/WebHost.Configs.Dao/FileDao.xml" />
      <!--Service-->
      <resource uri="assembly://WebHost/WebHost.Configs.Service/Service.xml" />
      <!--Facade-->
      <resource uri="assembly://WebHost/WebHost.Configs.Facade/Facade.xml" />
    </context>
    <objects xmlns="http://www.springframework.net"
         xmlns:aop="http://www.springframework.net/aop">
    </objects>
  </spring>
  <databaseSettings>
    <!--SQL Server-->
    <add key="provider" value="System.Data.SqlClient" />
    <!--分析库连接配置-->
    <add key="connectionString"
          value="server=192.168.10.165;database=Northwind;uid=sa;pwd=000000;" />
    <!--数据库方言配置-->
    <add key="dialect" value="NHibernate.Dialect.MsSql2005Dialect" />
    <add key="driver_class" value="NHibernate.Driver.SqlClientDriver"/>

  </databaseSettings>
  <appSettings>
    <!--spring接管HibernateSession生命周期-->
    <add key="Spring.Data.NHibernate.Support.OpenSessionInViewModule.SessionFactoryObjectName" value="NHibernateSessionFactory" />
    <!-- log4net配置文件路径-->
    <add key="log4net" value="\Configs\log4net_local.config" />
    <add key="webpages:Version" value="1.0.0.0"/>
    <add key="ClientValidationEnabled" value="true"/>
    <add key="UnobtrusiveJavaScriptEnabled" value="true"/>
  </appSettings>
  <system.web>
    <!--
            设置 compilation debug="true" ，将调试符号 
            插入已编译的页面中。但由于这会影响性能， 
           因此请只在开发过程中 
            将此值设置为 true。
        -->
    <compilation debug="true" targetFramework="4.0"/>
    <!--
            通过 <authentication> 节可以配置
            ASP.NET 使用的安全身份验证 
            模式，以标识传入的用户。 
        -->
    <authentication mode="Windows"/>
    <!--
            通过 <customErrors> 节可以配置在执行请求过程中出现未处理错误时， 
           应执行的操作。 
            具体说来，开发人员通过该节 
            可以配置要显示的 html 错误页 
            以代替错误堆栈跟踪。

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
    <!--spring接管HibernateSession生命周期-->
    <httpModules>
      <add name="Spring" type="Spring.Context.Support.WebSupportModule, Spring.Web"/>
      <add name="OpenSessionInView" type="Spring.Data.NHibernate.Support.OpenSessionInViewModule, Spring.Data.NHibernate32" />
    </httpModules>
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/>
  </system.web>
  <system.web.extensions>
    <scripting>
      <webServices>
        <!--
              取消对此节的注释以启用身份验证服务。如果适用，请加入 
              requireSSL="true"。

          <authenticationService enabled="true" requireSSL = "true|false"/>
          -->
        <!--
              取消对这些行的注释，以启用配置文件服务并选择 
              可在 ASP.NET AJAX  应用程序中检索和修改的
              配置文件属性。

          <profileService enabled="true"
                          readAccessProperties="propertyname1,propertyname2"
                          writeAccessProperties="propertyname1,propertyname2" />
          -->
        <!--
              取消对此节的注释，以启用角色服务。

          <roleService enabled="true"/>
          -->
      </webServices>
      <!--
        <scriptResourceHandler enableCompression="true" enableCaching="true" />
        -->
    </scripting>
  </system.web.extensions>
  <!--
        在 Internet 信息服务 7.0 下，运行 ASP.NET AJAX 要求 
      system.webServer 节。这在以前版本的 IIS 中并非必需。
    -->
  <system.serviceModel>
    <services>
      <service name="ProductFacade" behaviorConfiguration="WcfServerBehavior">
        <!-- Service Endpoints -->
        <endpoint address="" binding="wsHttpBinding" contract="IFacade.IProducts.IProductFacade"/>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="WcfServerBehavior">
          <!-- 为避免泄漏元数据信息，请在部署前将以下值设置为 false 并删除上面的元数据终结点-->
          <serviceMetadata httpGetEnabled="true"/>
          <!-- 要接收故障异常详细信息以进行调试，请将以下值设置为 true。在部署前设置为 false 以避免泄漏异常信息-->
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
</configuration>