<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.pic_zip">
             <summary>
            pic_zip 图片缩略图生成类
             </summary>
        </member>
        <member name="M:Common.pic_zip.getzip_pic(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            图片缩略图生成算法
            </summary>
            <param name="int_Width">宽度</param>
            <param name="int_Height">高度</param>
            <param name="input_ImgFile">文件路径</param>
            <param name="out_ImgFile">保存文件路径</param>
            <param name="filename">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Common.pic_zip.Makesmallimage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图 (高清缩放)
            </summary>
            <param name="originalImage">原图片</param>
            <param name="width">缩放宽度</param>
            <param name="height">缩放高度</param>
            <returns></returns>
        </member>
        <member name="M:Common.pic_zip.MakeThumbnail(System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            生成缩略图 (没有补白)
            </summary> 
            <param name="originalImagePath">源图路径（物理路径）</param> 
            <param name="thumbnailPath">缩略图路径（物理路径）</param> 
            <param name="width">缩略图宽度</param> 
            <param name="height">缩略图高度</param>   
        </member>
        <member name="T:Common.XMlHelper">
             <summary>
            XMlHelper 的摘要说明
             </summary>
        </member>
        <member name="M:Common.XMlHelper.Read(System.String,System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            <returns>string</returns>
        </member>
        <member name="M:Common.XMlHelper.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Common.XMlHelper.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Common.XMlHelper.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Common.DESProvider">
            <summary>
            DES算法加密解密
            </summary>
        </member>
        <member name="M:Common.DESProvider.EncryptString(System.String,System.String)">
            <summary>
            采用DES算法对字符串加密
            </summary>
            <param name="encryptString">要加密的字符串</param>
            <param name="key">加密的密钥</param>
            <returns></returns>
        </member>
        <member name="M:Common.DESProvider.EncryptString(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.DESProvider.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            采用DES算法对字节数组加密
            </summary>
            <param name="sourceBytes">要加密的字节数组</param>
            <param name="keyBytes">算法的密钥，长度为8的倍数，最大长度64</param>
            <param name="keyIV">算法的初始化向量，长度为8的倍数，最大长度64</param>
            <returns></returns>
        </member>
        <member name="M:Common.DESProvider.DecryptString(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.DESProvider.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            采用DES算法对字节数组解密
            </summary>
            <param name="sourceBytes">要加密的字节数组</param>
            <param name="keyBytes">算法的密钥，长度为8的倍数，最大长度64</param>
            <param name="keyIV">算法的初始化向量，长度为8的倍数，最大长度64</param>
            <returns></returns>
        </member>
        <member name="M:Common.DESProvider.CheckByteArrayLength(System.Byte[])">
            <summary>
            检查密钥或初始化向量的长度，如果不是8的倍数或长度大于64则截取前8个元素
            </summary>
            <param name="byteArray">要检查的数组</param>
            <returns></returns>
        </member>
        <member name="P:Common.DESProvider.Key">
            <summary>
            对称加密解密的密钥
            </summary>
        </member>
        <member name="T:Common.SessionHelper">
            <summary>
            Session 操作类
            1、GetSession(string name)根据session名获取session对象
            2、SetSession(string name, object val)设置session
            </summary>
        </member>
        <member name="M:Common.SessionHelper.GetSession(System.String)">
            <summary>
            根据session名获取session对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Common.SessionHelper.SetSession(System.String,System.Object)">
            <summary>
            设置session
            </summary>
            <param name="name">session 名</param>
            <param name="val">session 值</param>
        </member>
        <member name="M:Common.FileOperate.DelFile(System.String)">
            <summary>
            文件删除
            </summary>
            <param name="FileRealPath">文件绝对路径</param>
        </member>
        <member name="M:Common.FileOperate.FileDelete(System.String)">
            <summary>
            文件删除
            </summary>
            <param name="VirtualFilePath">文件虚拟路径</param>
        </member>
        <member name="M:Common.FileOperate.FileDelete(System.String,System.Boolean)">
            <summary>
            是否接连删除该路径下的small,middle中的图片
            </summary>
            <param name="VirtualFilePath">虚拟路径</param>
            <param name="IsDeleteForAll">是否需要删除该目录下的small,middle目录中的缩略图</param>
        </member>
        <member name="M:Common.FileOperate.GetPostfixStr(System.String)">
            <summary>
            取后缀名
            </summary>
            <param name="filename">文件名</param>
            <returns>.gif|.html格式</returns>
        </member>
        <member name="M:Common.FileOperate.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:Common.FileOperate.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileOperate.FileAdd(System.String,System.String)">
            <summary>
            追加文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="M:Common.FileOperate.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
        </member>
        <member name="M:Common.FileOperate.FileDel(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:Common.FileOperate.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:Common.FileOperate.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="OrignFolder">当前目录</param>
            <param name="NewFloder">新目录</param>
        </member>
        <member name="M:Common.FileOperate.FolderCreate(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:Common.FileOperate.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹目录及文件
            </summary>
            <param name="dir"></param>  
            <returns></returns>
        </member>
        <member name="M:Common.FileOperate.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Common.FileOperate.GetFoldAll(System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件
            </summary>
            <param name="Path">详细路径</param>
        </member>
        <member name="M:Common.FileOperate.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileOperate.GetFoldAll(System.String,System.String,System.String)">
             <summary>
             获取指定文件夹下所有子目录及文件(下拉框形)
             </summary>
             <param name="Path">详细路径</param>
            <param name="DropName">下拉列表名称</param>
            <param name="tplPath">默认选择模板名称</param>
        </member>
        <member name="M:Common.FileOperate.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <param name="tplPath">默认选择模板名称</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileOperate.GetDirectoryLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileOperate.GetFileAttibe(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="T:Common.BindDataControl">
            <summary>
            数据展示控件 绑定数据类
            </summary>
        </member>
        <member name="M:Common.BindDataControl.BindDataList(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            简单绑定DataList
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:Common.BindDataControl.BindDataReaderList(System.Web.UI.Control,System.Data.SqlClient.SqlDataReader)">
            <summary>
            SqlDataReader简单绑定DataList
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:Common.BindDataControl.BindGridView(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            简单绑定GridView
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:Common.BindDataControl.BindRepeater(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            绑定服务器控件 简单绑定Repeater
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="T:Common.QueryString">
            <summary>
            QueryString 地址栏参数
            </summary>
        </member>
        <member name="M:Common.QueryString.Q(System.String)">
            <summary>
            等于Request.QueryString;如果为null 返回 空“” ，否则返回Request.QueryString[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Common.QueryString.FormRequest(System.String)">
            <summary>
            等于  Request.Form  如果为null 返回 空“” ，否则返回 Request.Form[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Common.QueryString.QId(System.String)">
            <summary>
            获取url中的id
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Common.QueryString.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:Common.QueryString.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Common.QueryString.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="P:Common.QueryString.Current">
            <summary>
            HttpContext Current
            </summary>
        </member>
        <member name="P:Common.QueryString.Request">
            <summary>
            HttpContext Current  HttpRequest Request   get { return Current.Request;
            </summary>
        </member>
        <member name="P:Common.QueryString.Response">
            <summary>
             HttpContext Current  HttpRequest Request   get { return Current.Request; HttpResponse Response  return Current.Response;
            </summary>
        </member>
        <member name="T:Common.JScript">
            <summary>
            一些常用的Js调用
            添加新版说明：由于旧版普遍采用Response.Write(string msg)的方式输出js脚本，这种
            方式输出的js脚本会在html元素的&lt;html&gt;&lt;/html&gt;标签之外，破坏了整个xhtml的结构,
            而新版本则采用ClientScript.RegisterStartupScript(string msg)的方式输出，不会改变xhtml的结构,
            不会影响执行效果。
            为了向下兼容，所以新版本采用了重载的方式，新版本中要求一个System.Web.UI.Page类的实例。
            创建时间：2006-9-13
            创建者：马先光
            新版作者：周公
            修改日期：2007-4-17
            修改版发布网址：http://blog.csdn.net/zhoufoxcn
            </summary>
        </member>
        <member name="M:Common.JScript.Alert(System.String)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="message">窗口信息</param>
        </member>
        <member name="M:Common.JScript.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出消息框并且转向到新的URL
            </summary>
            <param name="message">消息内容</param>
            <param name="toURL">连接地址</param>
        </member>
        <member name="M:Common.JScript.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:Common.JScript.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:Common.JScript.RefreshParent(System.String)">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:Common.JScript.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:Common.JScript.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:Common.JScript.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url">连接地址</param>
        </member>
        <member name="M:Common.JScript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
        </member>
        <member name="M:Common.JScript.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            弹出模态窗口
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
        </member>
        <member name="M:Common.JScript.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            弹出模态窗口
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JScript.Alert(System.String,System.Web.UI.Page)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="message">窗口信息</param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.AlertAndRedirect(System.String,System.String,System.Web.UI.Page)">
            <summary>
            弹出消息框并且转向到新的URL
            </summary>
            <param name="message">消息内容</param>
            <param name="toURL">连接地址</param>
            <param name="page">Page类的实例</param> 
        </member>
        <member name="M:Common.JScript.GoHistory(System.Int32,System.Web.UI.Page)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
            <param name="page">Page类的实例</param> 
        </member>
        <member name="M:Common.JScript.RefreshParent(System.String,System.Web.UI.Page)">
            <summary>
            刷新父窗口
            </summary>
            <param name="url">要刷新的url</param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.RefreshOpener(System.Web.UI.Page)">
            <summary>
            刷新打开窗口
            </summary>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Web.UI.Page)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.JavaScriptLocationHref(System.String,System.Web.UI.Page)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url">连接地址</param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Web.UI.Page)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.ShowModalDialogWindow(System.String,System.String,System.Web.UI.Page)">
            <summary>
            弹出模态窗口
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
            <param name="page">Page类的实例</param>
        </member>
        <member name="M:Common.JScript.AppendScript(System.String,System.Web.UI.Page,System.Boolean)">
            <summary>
            向当前页面动态输出客户端脚本代码
            </summary>
            <param name="javascript">javascript脚本段</param>
            <param name="page">Page类的实例</param>
            <param name="afterForm">是否紧跟在&lt;form&gt;标记之后输出javascript脚本，如果不是则在&lt;/form&gt;标记之前输出脚本代码</param>
        </member>
        <member name="T:Common.NormalRegexType">
            <summary>
            关于正则验证信息类
            </summary>
        </member>
        <member name="F:Common.NormalRegexType.IsNumberOrPasswordPattern">
            <summary>
            正则验证帐号和密码的模式字符串(字母开头，允许5-16字节，允许字母数字下划线)
            </summary>
        </member>
        <member name="F:Common.NormalRegexType.IsEmailPattern">
            <summary>
            正则验证Email的模式字符串
            </summary>
        </member>
        <member name="T:Common.FormatToJson">
            <summary>
            Summary description for FormatToJson
            </summary>
        </member>
        <member name="M:Common.FormatToJson.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>  
            List转成json   
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="jsonName"></param>  
            <param name="list"></param>  
            <returns></returns>  
        </member>
        <member name="M:Common.FormatToJson.ListToJsonNoName``1(System.Collections.Generic.IList{``0})">
            <summary>  
            List转成json (不生成jsonName版本)  
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="list"></param>  
            <returns></returns>  
        </member>
        <member name="M:Common.FormatToJson.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>  
            List转成json   
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="list"></param>  
            <returns></returns>  
        </member>
        <member name="M:Common.FormatToJson.ScriptSerializationToJson(System.Object)">
            <summary>
            序列化object类型
            </summary>
            <param name="obj">object类型</param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.DeserializeToJson(System.String)">
            <summary>
            解析json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Object)">
            <summary>   
            对象转换为Json字符串   
            </summary>   
            <param name="jsonObject">对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Collections.IEnumerable)">
            <summary>   
            对象集合转换Json   
            </summary>   
            <param name="array">集合对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.ToArrayString(System.Collections.IEnumerable)">
            <summary>   
            普通集合转换Json   
            </summary>   
            <param name="array">集合对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Data.DataTable)">
            <summary>   
            Datatable转换为Json   
            </summary>   
            <param name="table">Datatable对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.MiniUiToJsonFormat(System.String,System.Int32)">
            <summary>
            为miniui生成json格式(记住,传入数据,包括总行数和数据项的json
            </summary>
            <param name="MiniUi">数据项的json,比如[{"id":1,"name":"tianzh"},{"id":2,"name":"3"}]</param>
            <param name="total">记录总行数</param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.MiniUiToJsonForTree(System.String,System.String)">
            <summary>
            专门为muniUi解析树形的json 
            大致格式:[{id:"root",text:"总根目录",expanded:false,children:[{id:"xxx",text:"xx"},{id:"xxx",text:"xx"}]}]
            </summary>
            <param name="strMiniUi">传入参数为[{id:"xxx",text:"xx"},{id:"xxx",text:"xx"}]</param>
            <param name="rootName">根标题</param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.MiniUiListToJson``1(System.Collections.Generic.IList{``0},System.Int32,System.String)">
            <summary>
            专门生成为MiniUi生成json数据(List->json)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">实现了Ilist接口的list</param>
            <param name="total">记录总数</param>
            <param name="paramMaxMinAvg">这里放排序的参数例如,string para="\"maxAge\":37,\"avgAge\":27,\"minAge\":24"</param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.EasyUIListToJson``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            专门生成为EasyUI生成json数据(List->json)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.EasyUIDataGridToJson(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            专门生成为DataGrid的json数据
            </summary>
            <param name="dt"></param>
            <param name="jsonName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Data.DataTable,System.String)">
            <summary>  
            DataTable转成Json   
            </summary>  
            <param name="jsonName"></param>  
            <param name="dt"></param>  
            <returns></returns>  
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Data.Common.DbDataReader)">
            <summary>   
            DataReader转换为Json   
            </summary>   
            <param name="dataReader">DataReader对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.ToJson(System.Data.DataSet)">
            <summary>   
            DataSet转换为Json   
            </summary>   
            <param name="dataSet">DataSet对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Common.FormatToJson.String2Json(System.String)">
            <summary>  
            过滤特殊字符  
            </summary>  
            <param name="s"></param>  
            <returns></returns>  
        </member>
        <member name="M:Common.FormatToJson.StringFormat(System.String,System.Type)">
            <summary>  
            格式化字符型、日期型、布尔型  
            </summary>  
            <param name="str"></param>  
            <param name="type"></param>  
            <returns></returns>  
        </member>
        <member name="T:Common.RegexHelper">
            <summary>
            操作正则表达式的公共类
            </summary>    
        </member>
        <member name="M:Common.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:Common.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="M:Common.PageValidate.FormatString(System.String,System.Int32)">
            <summary>
            格式化字符串
            </summary>
            <param name="inputData">源字符串</param>
            <param name="formatlevel">0:不做验证| 1:sql语句参数| 2:存储过程参数| 3:EncodeHtml| 4:Encode+sql| 5:Encode+存储过程</param>
            <returns>返回格式化后的字符串</returns>
        </member>
        <member name="M:Common.PageValidate.FetchInputDigit(System.Web.HttpRequest,System.String,System.Int32)">
            <summary>
            检查Request查询字符串的键值，是否是数字，最大长度限制
            </summary>
            <param name="req">Request</param>
            <param name="inputKey">Request的键值</param>
            <param name="maxLen">最大长度</param>
            <returns>返回Request查询字符串</returns>
        </member>
        <member name="M:Common.PageValidate.checkString(System.String,System.Int32)">
            <summary>
            检测字符串类型
            </summary>
            <param name="inputData">输入字符串</param>
            <param name="checktype">0:不检测| 1:数字| 2:符号数字| 3: 浮点数| 4:符号浮点| 5: 中文?| 6:邮件?</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsNumber(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsNumberSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsDecimal(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.IsEmail(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.SqlText(System.String,System.Int32)">
            <summary>
            检查字符串最大长度，返回指定长度的串
            </summary>
            <param name="sqlInput">输入字符串</param>
            <param name="maxLength">最大长度</param>
            <returns></returns>			
        </member>
        <member name="M:Common.PageValidate.HtmlEncode(System.String)">
            <summary>
            字符串编码
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.SetLabel(System.Web.UI.WebControls.Label,System.String)">
            <summary>
            设置Label显示Encode的字符串
            </summary>
            <param name="lbl"></param>
            <param name="txtInput"></param>
        </member>
        <member name="M:Common.PageValidate.Text_Length(System.String)">
            <summary>   
            计算文本长度，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="Text">需计算长度的字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:Common.PageValidate.GetSubString(System.String,System.Int32)">
            <summary>   
            截取文本，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="str">待截取的字符串</param>
            <param name="length">需计算长度的字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:Common.PageValidate.IsDateTime(System.String)">
            <summary>
            日期格式字符串判断
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PageValidate.isContainSpecChar(System.String)">
            <summary>
            检查输入的参数是不是某些定义好的特殊字符：这个方法目前用于密码输入的安全检查
            </summary>
        </member>
        <member name="T:Common.Rand">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Common.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:Common.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Common.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Common.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Common.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Common.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="T:Common.YZMHelper">
            <summary>
            验证图片类
            </summary>
        </member>
        <member name="M:Common.YZMHelper.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:Common.YZMHelper.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Common.YZMHelper.CreateImage">
            <summary>
            绘制验证码
            </summary>
        </member>
        <member name="M:Common.YZMHelper.GetRandomColor">
            <summary>
            字体随机颜色
            </summary>
        </member>
        <member name="M:Common.YZMHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高,一般为3</param>
            <param name="dPhase">波形的起始相位,取值区间[0-2*PI)</param>
        </member>
        <member name="P:Common.YZMHelper.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Common.YZMHelper.Image">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="T:Common.SessionHelper2">
            <summary>
            session辅助类
            </summary>
        </member>
        <member name="M:Common.SessionHelper2.Add(System.String,System.String)">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
        </member>
        <member name="M:Common.SessionHelper2.Adds(System.String,System.String[])">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
        </member>
        <member name="M:Common.SessionHelper2.Add(System.String,System.String,System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:Common.SessionHelper2.Adds(System.String,System.String[],System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:Common.SessionHelper2.Get(System.String)">
            <summary>
            读取某个Session对象值
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值</returns>
        </member>
        <member name="M:Common.SessionHelper2.Gets(System.String)">
            <summary>
            读取某个Session对象值数组
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值数组</returns>
        </member>
        <member name="M:Common.SessionHelper2.Del(System.String)">
            <summary>
            删除某个Session对象
            </summary>
            <param name="strSessionName">Session对象名称</param>
        </member>
        <member name="T:Common.Tools">
            <summary>
            共用工具类
            </summary>
        </member>
        <member name="M:Common.Tools.GetUserIp">
            <summary>
            获得用户IP
            </summary>
        </member>
        <member name="M:Common.Tools.GetMD5(System.String)">
            <summary>
            根据配置对指定字符串进行 MD5 加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Tools.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.Tools.ClipString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串
            </summary>
            <param name="inputString">要处理的字符串</param>
            <param name="len">指定长度</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:Common.Tools.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:Common.Tools.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:Common.Tools.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Common.Tools.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Tools.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:Common.Tools.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="M:Common.Tools.IsIP(System.String)">
            <summary>
            验证IP地址是否合法
            </summary>
            <param name="ip">要验证的IP地址</param>        
        </member>
        <member name="M:Common.Tools.IsEmail(System.String)">
            <summary>
            验证EMail是否合法
            </summary>
            <param name="email">要验证的Email</param>
        </member>
        <member name="M:Common.Tools.IsInt(System.String)">
            <summary>
            验证是否为整数 如果为空，认为验证不合格 返回false
            </summary>
            <param name="number">要验证的整数</param>        
        </member>
        <member name="M:Common.Tools.IsNumber(System.String)">
            <summary>
            验证是否为数字
            </summary>
            <param name="number">要验证的数字</param>        
        </member>
        <member name="M:Common.Tools.IsDate(System.String@)">
            <summary>
            验证日期是否合法,对不规则的作了简单处理
            </summary>
            <param name="date">日期</param>
        </member>
        <member name="M:Common.Tools.IsIdCard(System.String)">
            <summary>
            验证身份证是否合法
            </summary>
            <param name="idCard">要验证的身份证</param>        
        </member>
        <member name="M:Common.Tools.IsValidInput(System.String@,System.Boolean)">
            <summary>
            检测客户输入的字符串是否有效,并将原始字符串修改为有效字符串或空字符串。
            当检测到客户的输入中有攻击性危险字符串,则返回false,有效返回true。
            </summary>
            <param name="input">要检测的字符串</param>
            <param name="IsNullValid">是否需要做非空判断,true表示要,false表示不要</param>
        </member>
        <member name="M:Common.Tools.GetEmail(System.String)">
            <summary>
             //前台显示邮箱的掩码替换(由tzh@qq.com等替换成t*****@qq.com)
            </summary>
            <param name="Email">邮箱</param>
            <returns></returns>
        </member>
        <member name="M:Common.Tools.WriteJsonForReturn(System.Boolean,System.String)">
            <summary>
            为输出ui界面写入json数据
            </summary>
            <param name="Status">执行状态</param>
            <param name="Data">输出信息</param>
            <returns></returns>
        </member>
        <member name="T:SMTP">
            <summary>
            邮件发送类
            </summary>
        </member>
        <member name="M:SMTP.#ctor(System.String)">
            <summary>
            邮件发送初始化
            </summary>
            <param name="To"></param>
        </member>
        <member name="M:SMTP.sendemail(System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="subject">标题</param>
            <param name="bodyinfo">内容</param>
            <returns></returns>
        </member>
        <member name="M:SMTP.Activation(System.String,System.String)">
            <summary>
            邮箱激活
            </summary>
            <param name="url"></param>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:SMTP.SendMail(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="T:Common.RupengPager">
            <summary>
            分页组件调用实例
            var pager = new Common.RupengPager();
                   pager.UrlFormat = "测试分页.aspx?pagenum={n}";//设置分页URL
                   pager.PageSize = 10; //设置每页显示个数
                   pager.TryParseCurrentPageIndex(Request["pagenum"]);//获取当前页数
                   int startRowIndex = (pager.CurrentPageIndex - 1) * pager.PageSize;//开始行号计算
                   So_KeywordLogBLL bll = new So_KeywordLogBLL();//获取分页数据
                   pager.TotalCount = bll.GetTotalCount();//计算总个数
                   Repeater1.DataSource = bll.GetPagedData(startRowIndex, startRowIndex + pager.PageSize - 1); //设置数据绑定
                   Repeater1.DataBind(); 
                  PagerHTML = pager.Render();//渲染页码条HTML
            </summary>
        </member>
        <member name="M:Common.RupengPager.#ctor">
            <summary>
            默认初始化
            </summary>
        </member>
        <member name="M:Common.RupengPager.TryParseCurrentPageIndex(System.String)">
            <summary>
            尝试从字符串pn中解析当前页面赋值给CurrentPageIndex
            </summary>
            <param name="pn"></param>
        </member>
        <member name="M:Common.RupengPager.GetPageLink(System.Int32,System.String)">
            <summary>
            创建页码链接
            </summary>
            <param name="i">页码</param>
            <param name="text">链接文本</param>
            <returns></returns>
        </member>
        <member name="P:Common.RupengPager.TotalCount">
            <summary>
            总数据条数
            </summary>
        </member>
        <member name="P:Common.RupengPager.PageSize">
            <summary>
            每页数据条数
            </summary>
        </member>
        <member name="P:Common.RupengPager.CurrentPageIndex">
            <summary>
            当前页码（从1开始）
            </summary>
        </member>
        <member name="P:Common.RupengPager.MaxPagerCount">
            <summary>
            显示出来最多的页码数量，因为假设有100页，不可能把100页都显示到界面上
            </summary>
        </member>
        <member name="P:Common.RupengPager.UrlFormat">
            <summary>
            页码链接的地址格式，页码用{n}占位。
            </summary>
        </member>
        <member name="T:Common.CookieHelper">
            <summary>
            Cookie辅助类
            </summary>
        </member>
        <member name="M:Common.CookieHelper.ClearCookie(System.String)">
            <summary>
            清除指定Cookie
            </summary>
            <param name="cookiename">cookiename</param>
        </member>
        <member name="M:Common.CookieHelper.GetCookieValue(System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookiename">cookiename</param>
            <returns></returns>
        </member>
        <member name="M:Common.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie（24小时过期）
            </summary>
            <param name="cookiename"></param>
            <param name="cookievalue"></param>
        </member>
        <member name="M:Common.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            添加一个Cookie
            </summary>
            <param name="cookiename">cookie名</param>
            <param name="cookievalue">cookie值</param>
            <param name="expires">过期时间 DateTime</param>
        </member>
        <member name="T:Common.MD5Provider">
            <summary>
            MD5Provider 的摘要说明
            </summary>
        </member>
        <member name="M:Common.MD5Provider.Hash(System.String)">
            <summary>
            计算指定字符串的MD5哈希值
            </summary>
            <param name="message">要进行哈希计算的字符串</param>
            <returns></returns>
        </member>
        <member name="T:Common.CacheHelper">
            <summary>
            缓存辅助类
            </summary>
        </member>
        <member name="M:Common.CacheHelper.GetCache(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="CacheKey">键</param>
        </member>
        <member name="M:Common.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:Common.CacheHelper.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:Common.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:Common.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:Common.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:Common.Base64Provider">
            <summary>
            实现Base64编码与其它编码转换的类
            </summary>
        </member>
        <member name="M:Common.Base64Provider.EncodeBase64String(System.String)">
            <summary>
            将其它编码的字符串转换成Base64编码的字符串
            </summary>
            <param name="source">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.Base64Provider.DecodeBase64String(System.String)">
            <summary>
            将Base64编码的字符串转换成其它编码的字符串
            </summary>
            <param name="result">要转换的Base64编码的字符串</param>
            <returns></returns>
        </member>
        <member name="T:Common.DownFile">
            <summary>
            用webClient下载文件
            </summary>
        </member>
        <member name="M:Common.DownFile.CreateStaticByWebClient(System.String,System.String)">
            <summary>
            生成静态页面
            调用实例:
              Common.DownFile webclient = new Common.DownFile();
               string RequestVirtualUrl= "/News/ViewNews.aspx?NewsId="+Info.Id;
              string SaveVirtualPath = "~/News/" + Info.Id + ".htm";
               webclient.CreateStaticByWebClient(RequestVirtualUrl, SaveVirtualPath);
            </summary>
            <param name="VirtualRequestUrl">要请求的虚拟路径,例如: "/News/ViewNews.aspx?NewsId="+Info.Id;</param>
            <param name="SaveVirtualPath">要保存的虚拟路径,例如:"~/News/" + Info.Id + ".htm";</param>
        </member>
        <member name="T:Common.CzcraftDeletePic">
            <summary>
            潮州工艺品图片删除
            </summary>
        </member>
        <member name="M:Common.CzcraftDeletePic.FileDelete(Common.CzcraftDeletePic.DeletePicType,System.String)">
            <summary>
            潮州工艺品图片删除
            </summary>
            <param name="FileType">文件类别(GetMasterPic,GetMasterCert,GetCompanyCert,GetLogoCompanyPic,GetMainProductPic,GetOtherProductPic)</param>
            <param name="FileName">文件名</param>
        </member>
        <member name="M:Common.CzcraftDeletePic.GetPicPath(Common.CzcraftDeletePic.DeletePicType,System.String)">
            <summary>
            获取文件路径(根据文件类别)
            </summary>
            <param name="FileType">文件类别</param>
            <param name="FileName">文件名</param>
            <returns></returns>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetMasterPic">
            <summary>
            大师图片
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetMasterCert">
            <summary>
            大师荣誉图片
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetCompanyCert">
            <summary>
            企业荣誉图片
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetLogoCompanyPic">
            <summary>
            企业主图片
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetCompanyPic">
            <summary>
            企业美景图
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetMainProductPic">
            <summary>
            产品主图片
            </summary>
        </member>
        <member name="F:Common.CzcraftDeletePic.DeletePicType.GetOtherProductPic">
            <summary>
            产品副图片
            </summary>
        </member>
        <member name="T:Common.FileUpload">
            <summary>
            文件上传
            </summary>
        </member>
        <member name="M:Common.FileUpload.FileUploadSingle(System.Web.HttpContext,System.String,System.String@)">
            <summary>
            单个文件上传(只获取第一个文件,返回的文件名是文件的md5值),返回为json数据格式,成功返回{status:"success",website:"a.jpg"},失败,返回{status:"error",website:"error"}
            </summary>
            <param name="context">上下文</param>
            <param name="FilePath">文件路径</param>
            <param name="outFileName">返回文件的md5</param>
            <returns>返回json状态信息</returns>
        </member>
        <member name="M:Common.FileUpload.FileUploadMulti(System.Web.HttpContext,System.String,System.String[]@)">
            <summary>
            单个文件上传(只获取第一个文件,返回的文件名是文件的md5值),返回为json数据格式,成功返回{status:"success",website:"a.jpg"},失败,返回{status:"error",website:"error"}
            </summary>
            <param name="context">上下文</param>
            <param name="FilePath">文件路径</param>
            <param name="outFileName">返回文件的md5</param>
            <returns>返回json状态信息</returns>
        </member>
        <member name="M:Common.FileUpload.CreateFileForFileNameByMd5(System.String)">
            <summary>
            根据文件的md5值当作文件的文件名(
            </summary>
            <param name="FileName">文件名</param>
            <returns>文件的md5值</returns>
        </member>
        <member name="M:Common.FileUpload.CreateDateTimeForFileName(System.String)">
            <summary>
            根据当前时间生成文件名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.DirFile">
            <summary>
            文件操作夹
            </summary>
        </member>
        <member name="M:Common.DirFile.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.DirFile.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:Common.DirFile.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:Common.DirFile.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:Common.DirFile.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">要创建的目录路径包括目录名</param>
        </member>
        <member name="M:Common.DirFile.DeleteDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dir">要删除的目录路径和名称</param>
        </member>
        <member name="M:Common.DirFile.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">要删除的文件路径和名称</param>
        </member>
        <member name="M:Common.DirFile.CreateFile(System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="dir">带后缀的文件名</param>
            <param name="pagestr">文件内容</param>
        </member>
        <member name="M:Common.DirFile.MoveFile(System.String,System.String)">
            <summary>
            移动文件(剪贴--粘贴)
            </summary>
            <param name="dir1">要移动的文件的路径及全名(包括后缀)</param>
            <param name="dir2">文件移动到新的位置,并指定新的文件名</param>
        </member>
        <member name="M:Common.DirFile.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="dir1">要复制的文件的路径已经全名(包括后缀)</param>
            <param name="dir2">目标位置,并指定新的文件名</param>
        </member>
        <member name="M:Common.DirFile.GetDateDir">
            <summary>
            根据时间得到目录名yyyyMMdd
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.DirFile.GetDateFile">
            <summary>
            根据时间得到文件名HHmmssff
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.DirFile.CopyFolder(System.String,System.String)">
            <summary>
            复制文件夹(递归)
            </summary>
            <param name="varFromDirectory">源文件夹路径</param>
            <param name="varToDirectory">目标文件夹路径</param>
        </member>
        <member name="M:Common.DirFile.ExistsFile(System.String)">
            <summary>
            检查文件,如果文件不存在则创建  
            </summary>
            <param name="FilePath">路径,包括文件名</param>
        </member>
        <member name="M:Common.DirFile.DeleteFolderFiles(System.String,System.String)">
            <summary>
            删除指定文件夹对应其他文件夹里的文件
            </summary>
            <param name="varFromDirectory">指定文件夹路径</param>
            <param name="varToDirectory">对应其他文件夹路径</param>
        </member>
        <member name="M:Common.DirFile.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.CopyFiles(System.String,System.String)">
            <summary>
            复制文件参考方法,页面中引用
            </summary>
            <param name="cDir">新路径</param>
            <param name="TempId">模板引擎替换编号</param>
        </member>
        <member name="M:Common.DirFile.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.CreateFile(System.String)">
            <summary>
            创建一个文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:Common.DirFile.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:Common.DirFile.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Common.DirFile.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:Common.DirFile.Copy(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Common.DirFile.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Common.DirFile.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
    </members>
</doc>
